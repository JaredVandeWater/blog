(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{482:function(e,a,t){"use strict";t.r(a);var r=t(2),i=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"day-1-javascript-intro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day-1-javascript-intro"}},[e._v("#")]),e._v(" Day 1 - Javascript intro")]),e._v(" "),t("p",[e._v("(3-22-21)")]),e._v(" "),t("h2",{attrs:{id:"daily-journal-and-questions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#daily-journal-and-questions"}},[e._v("#")]),e._v(" Daily Journal and Questions")]),e._v(" "),t("p",[e._v("AFTERNOON PROJECT: https://github.com/JaredVandeWater/js-day1")]),e._v(" "),t("p",[e._v("What is Scope ?\n"),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v("\nScope is where the availability of variables is, if a var is inside a function, it is scoped to that func, whereas if it's outside, you can access it globally.")]),e._v(" "),t("p",[e._v("What is Hoisting ?\n"),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v("\nCode reads variables before other code, so they are basically hoisted to the top. this does not include the value, just that the var name exists.\n"),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v("\nIn what cases might you use let vs const vs var?\n"),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v("\nVars can be re-declared and they are good for being used globally and changed often. Let cannot be re-declared, which helps keep your variables from being accidentally overwritten if you are very lazy with names. Finally, const is the strictest, where it doesn't even let the value change.\n"),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v("\nThis was useful:\n"),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v(" "),t("br"),e._v("\nvar declarations are globally scoped or function scoped while let and const are block scoped.")]),e._v(" "),t("p",[e._v("var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared.")]),e._v(" "),t("p",[e._v("They are all hoisted to the top of their scope but while var variables are initialized with undefined, let and const variables are not initialized.")]),e._v(" "),t("p",[e._v("While var and let can be declared without being initialized, const must be initialized during declaration.")])])}),[],!1,null,null,null);a.default=i.exports}}]);