(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{483:function(a,e,r){"use strict";r.r(e);var t=r(2),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"day-2-javascript-more-problems"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#day-2-javascript-more-problems"}},[a._v("#")]),a._v(" Day 2 - Javascript - more problems")]),a._v(" "),r("p",[a._v("(3-23-21)")]),a._v(" "),r("h2",{attrs:{id:"daily-journal-and-questions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#daily-journal-and-questions"}},[a._v("#")]),a._v(" Daily Journal and Questions")]),a._v(" "),r("p",[a._v("AFTERNOON PROJECT: https://github.com/JaredVandeWater/js-day2")]),a._v(" "),r("br"),a._v(" "),r("br"),r("br"),a._v(" "),r("br"),a._v("\nWhat are the three ways to syntactically write a function? What are the differences in how the function acts (if any)?\n"),r("br"),a._v("\nDeclaration, expression, and Arrow functions. Main difference is that expressions define a function without a name and is not hoisted, and the arrow functions are just shorter syntax that don't create a 'this' value.\n"),r("br"),r("br"),a._v(" "),r("br"),a._v(" "),r("p",[a._v("What is the difference between Parameters and Arguments?\n"),r("br"),a._v(" "),r("br"),a._v("\nParameters are what ask for arguments before a function is called, whereas he arguments are what are actually passed through.\n"),r("br"),a._v(" "),r("br"),r("br"),a._v(" "),r("br"),a._v("\nWhat are higher order functions? Can you provide an example?\n"),r("br"),a._v("\nWhen a function accepts another function as a parameter, or returns a function.\n"),r("br"),a._v("\nThis would include things like map or filter.\n"),r("br"),a._v(" "),r("br")])])}),[],!1,null,null,null);e.default=n.exports}}]);